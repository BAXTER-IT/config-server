<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Configuration Processors Descriptor</title>
		<author email="ykryshchuk@n-ix.com.ua">Yuriy Kryshchuk</author>
	</properties>

	<body>

		<section name="Configuration Processors Descriptor">

			<p>This document explains in details the format of the configuration package
				descriptor.</p>

			<subsection name="Location">
				<p>The descriptor file, according to <a href="packaging.html">packaging rules</a>
					shall be located in processor JAR at
						<code>META-INF/services/com.baxter.config.processor.xml</code>. That is a
					place where the ProcessorFactory will look for it.</p>
			</subsection>

			<subsection name="Format">
				<p>The descriptor files should conform to <a href="xsd/processor.xsd"
						>processor.xsd</a> schema.</p>
				<iframe src="xsd/processor.xsd" width="100%" height="700"/>
			</subsection>

		</section>

		<section name="Descriptor upgrades">
			<p>Each descriptor has the section of <code>&lt;upgrades&gt;</code></p>
			<p>In this section are defined the upgrade events grouped by the version intervalls,
				they are connected to. Every intervall can contin the same type of upgrades. Adding
				a new setting, deleting an existing on moving or renaming it or updating the content
				of the setting. There is also posibility to upgrade multiple setting files in the
				same type by using regular expressions or operating system expressins using *</p>
			<p>If both file and regex attribute are specified in a command, the regular expresion will be considered as valid value.</p>

			<source><![CDATA[
			<upgrades>
				<from version="1.0" to="1.5">
					<add source="ext/*.jca" />
				</from>
				<from version="1.5" to="2.0">
					<del source="dummy.xml" />
				</from>
			</upgrades>
                ]]></source>

			<subsection name="Adding new files">
				<p>New file can be added to the repository by specifying the file name, or the
					pattern of the files</p>

				<p>In the simple case there is only one file specified. This file will be copied
					into the repoitory</p>
				<source><![CDATA[
			<upgrades>
				<from version="1.0" to="1.5">
					<add source="jms.xml" />
				</from>
			</upgrades>
			]]></source>

				<p>This format shows how to sepcify multiple files with operating system like
					pattern. Itt will copy every file into the repository that starts with jms its
					extension is xml</p>
				<source><![CDATA[
			<upgrades>
				<from version="1.0" to="1.5">
					<add source="jms*.xml" />
				</from>
			</upgrades>
			]]></source>

				<p>There is also a posibility to use regular expressins to specify the files need to
					be copied. Itt will copy every file into the repository that starts with jms its
					extension is xml</p>
				<source><![CDATA[
			<upgrades>
				<from version="1.0" to="1.5">
					<add source="jms([^\.]*).xml" />
				</from>
			</upgrades>
			]]></source>

			</subsection>


			<subsection name="Deleting files">
				<p>The upgrade process can remove setting files that are no longere needed for the
					system. The files to be deleted can be specified the same way as in the Add
					section, by specifying one file, or using OS or regular expressions</p>

				<source><![CDATA[
				<upgrades>
					<from version="1.0" to="1.5">
						<remove source="jms.xml" />
						<remove source="currencies*.xml" />
						<remove source="dbconnection([^\.]*).xml" />
					</from>
				</upgrades>
				]]></source>
			</subsection>

			<subsection name="Moving or renaming files">
				<p>A file can be moved and/or renamed by specifying the pass and the filename. The
					command of move contains 2 parameters. The first one is the file which specify
					the file of files that need to be moved. The second one is "to" which specifies
					the destination of the file, or the new name of the file.</p>

				<source><![CDATA[
				<upgrades>
					<from version="1.0" to="1.5">
					<move file="old/input.xml" to="new/input2.xml" />
				</from>
				</upgrades>
				]]></source>

				<p> The second parameter can also specify a directory. In this case the file names
					remain intact, and the files will be moved to the target directory. </p>

				<source><![CDATA[
				<upgrades>
					<from version="1.0" to="1.5">
					<move file="old/*.xml" to="new" />
				</from>
				</upgrades>
				]]></source>

				<p> The third posibility is to use regular expressions. In this case both the first
					and the second parameter need to be regular expression. This example will move
					all xml files from dir directory to the log dir2 directory. </p>

				<source><![CDATA[
				<upgrades>
					<from version="1.0" to="1.5">
					<move regexp="dir/([^\.]*)\.xml" to="log2/$1\.xml" />
				</from>
				</upgrades>
				]]></source>

			</subsection>

			<subsection name="Transforming files">
				<p>If there are changes in an existing files content the file can be updated by
					using <code>&lt;transform&gt;</code></p>
				<p>The transform command can be specified in two way. Eather it only specifies a
					stylesheet that contains the specification of the files, need to be updated, of
					it can be specified with the file or regexp argument of the transform tag. There
					is also posibility to select more then one file to update as in the case of
					remove. </p>

				<source><![CDATA[
				<upgrades>
				<from version="2.0" toVersion="2.1">
					<transform file="input.xml" stylesheet="upgrade_input_2.0_2.1.xsl" />
					<transform regexp="input(\([^\)]+\))?\.xml" stylesheet="upgrade_input_2.0_2.1.xsl" />
					<transform stylesheet="rename-in-jms.xsl" />
				</from>
				</upgrades>
				]]></source>
				
			</subsection>

		</section>

	</body>

</document>
